Homefrog v0.1 - Plugin-based Home Automation framework written in C/GObject

Current state: C APIs are in place, no documentation yet, tested on Raspberry Pi
Currently sorting out format for configure files and writing a REST plugin

How to build and run:

    only first time:

    aclocal
    autoconf
    automake --add-missing

    and then:

    ./configure
    make
    G_MESSAGES_DEBUG=all ./src/shp ./src/shp.config


API architecture:

+---------------------------------------------------------------+
| Group                                                         |
|                                                               |
| +-----------------+  +---------+                              |
| |                 |  |  Timer  |                              |
| |   Controller    |  +---------+                              |
| |                 |       |                                   |
| +-----------------+       |                                   |
|          |                |                                   |
|          v                v                                   |
| +-----------------------------------------------------------+ |
| |                         EventBUS                          | |
| +-----------------------------------------------------------+ |
|          ^                    ^                     ^         |
|          |                    |                     |         |
| +----------------+   +-----------------+   +----------------+ |
| | ds1820digitemp |   |    telldus      |   |      MySQL     | |
| |    Plugin      |   |     Plugin      |   |     Plugin     | |
| +----------------+   +-----------------+   +----------------+ |
|                                                               |
+---------------------------------------------------------------+

Example: Using the guts of the API to control a heater based on the temperature
in the room:

    ShpBus *bus;
    ShpGroup *group;
    ShpController *controller;
    ShpScene *scene;
    ShpRule *rule;
    ShpMessage *event;
    ShpCondition *condition;
    ShpPlugin *temperature;
    ShpPlugin *telldus;

    /* load ds1820digitemp plugin for obtaining temperature readings */
    temperature = shp_plugin_factory_create ("ds1820digitemp",
        "/home/floor1/LivingRoom/Temperature");
    g_object_set (G_OBJECT (temperature), "config-dir", "/home/pi/digitemp/",
        NULL);
    g_object_set (G_OBJECT (temperature), "device-id", "2", NULL);

    /* load telldus plugin for controlling heater */
    telldus = shp_plugin_factory_create ("telldus",
        "/home/floor1/LivingRoom/Heater");
    g_object_set (G_OBJECT (telldus), "device-id", "1", NULL);

    /* create the group and add the event bus, the controller and the plugins to
     * it */
    bus = shp_bus_new ();
    group = shp_group_new (bus);
    controller = shp_controller_new ();
    shp_group_add (group, SHP_COMPONENT (controller));
    shp_group_add (group, SHP_COMPONENT (temperature));
    shp_group_add (group, SHP_COMPONENT (telldus));

    /* create scene with one event */
    scene = shp_scene_new (g_object_ref (bus));
    event = shp_message_new ("/home/floor1/LivingRoom/Heater");
    shp_message_add_string (event, "status", "on");
    shp_scene_add_event (scene, event);

    /* create condition to be checked before activating the scene */
    condition = shp_condition_new ("/home/floor1/LivingRoom/Temperature");
    shp_condition_add_double_option (condition, "temperature", 15,
        SHP_CONDITION_OPERATOR_LT);

    /* add condition and scene to rule*/
    rule = shp_rule_new ();
    shp_rule_add_condition (rule, condition);
    shp_rule_set_scene (rule, scene);

    /* let the controller know about our new rule */
    shp_controller_add_rule (controller, rule);

    /* now start the group */
    shp_component_start (SHP_COMPONENT (group));

